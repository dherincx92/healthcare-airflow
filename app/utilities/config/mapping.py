'''
This code is inspired and slightly modified from
https://github.com/PrefectHQ/prefect/blob/master/src/prefect/configuration.py

author: derek663@gmail.com
last_updated: 10/18/2020
'''

from collections.abc import MutableMapping
from typing import cast, Type, TypeVar, Union

D = TypeVar("D", bound=Union[dict, MutableMapping])

class CompoundKey(tuple):
    pass

def nested_to_flatdict(dct: dict, parent=None):
    """
    Converts a nested dictionary into a flattened representation. Nested keys
    will be represented as a CompoundKey (i.e. tuple)

    Args:
        - dct (dictionary): a Python dictionary object
    """
    key_tuples = []
    k_parent = parent or tuple()
    for k,v in dct.items():
        parent_key = CompoundKey(k_parent + (k,))
        if isinstance(v, dict):
            # since flatten_dict() returns a list, we need to use `extend`
            # to add items from the list and not the list itself

            # Note: we use .items() since applying extend to a dict will only
            # extend a dict's keys.
            key_tuples.extend(nested_to_flatdict(v, parent_key).items())
        else:
            key_tuples.append((parent_key, v))
    return dict(key_tuples)

def flatdict_to_dict(dct: dict, dct_class: Type[D] = None) -> D:
    """Converts a flattened dictionary back to a nested dictionary.
    Args:
        - dct (dict): The dictionary to be nested. Each key should be a
            `CompoundKey`, as generated by `dict_to_flatdict()`
        - dct_class (type, optional): the type of the result; defaults to `dict`
    Returns:
        - D: An instance of `dct_class` used to represent a nested dictionary, bounded
            as a MutableMapping or dict
    """
    result = cast(D, (dct_class or dict)())
    for k, v in dct.items():
        if isinstance(k, CompoundKey):
            current_dict = result
            for ki in k[:-1]:
                current_dict = current_dict.setdefault(  # type: ignore
                    ki, (dct_class or dict)()
                )
            current_dict[k[-1]] = v
        else:
            result[k] = v

    return result
